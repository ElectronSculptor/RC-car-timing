// Dans ce code je vais tout combiner pour avoir la version finale 
// J'aurai l'acquisition de données avec LIDAR
// La reception radio
// L'envoi des données via WiFi à la Raspi4



// ON OUVRE LE CANAL D'ECOUTE QUAND LE LIDAR A DETECTE UN OBJET
//PUIS ON ENVOIE LES DONNEES A LA RASPI4 VIA WIFI


// Include Lidar
#include <Wire.h> 
#define SLAVE_ADDRESS 0x10 // I2C Indicates the address of the secondary device
#define COMMAND 0x00 // order
#define DATA_LENGTH 9 // data length

// Include for radio
#include <RH_ASK.h> 

// Include for wifi
#include <WiFi.h>


// Wifi connection
String ssid;
String password;
String host;
uint16_t port;

const char* ssid = "iPhone Gevorg";
const char* password = "Artur2002";
const char* host = "172.20.10.2"; // Replace with your Raspberry Pi's IP address
const uint16_t port = 4000;

WiFiClient client;



// Component Radio
RH_ASK driver(2000, 4, 5, 0); // Recepteur sur pin G4

unsigned char buf1[] = {0x5A,0x05,0x00,0x01,0x60};
DETECTION_THRESHOLD = 0;      // Seuil de détection de voiture (cm)
const int Capteur = 1; // Pour dire que c'est le capteur du tronçon 1


void calibrateLIDAR() {
    unsigned long startTime = millis();
    unsigned long endTime = startTime + 5000; // 5 secondes
    unsigned long sumDistances = 0;
    int count = 0;
    Serial.println("Lidar Calibration");

    while (millis() < endTime) {
        Wire.beginTransmission(SLAVE_ADDRESS);
        Wire.write(buf1, 5);
        Wire.endTransmission();
        Wire.requestFrom(SLAVE_ADDRESS, DATA_LENGTH);

        uint8_t data[DATA_LENGTH] = {0};
        int index = 0;

        while (Wire.available() > 0 && index < DATA_LENGTH) {
            data[index++] = Wire.read();
        }

        if (index == DATA_LENGTH) {
            uint16_t distance = data[2] + data[3] * 256;
            sumDistances += distance;
            count++;
        }

        delay(50); // Attendre un peu avant la prochaine lecture
    }

    if (count > 0) {
        DETECTION_THRESHOLD = (sumDistances / count) - 5;
        Serial.print("Calibration complete. Average distance: ");
        Serial.print(DETECTION_THRESHOLD);
        Serial.println(" cm");
    } else {
        Serial.println("Calibration failed. No valid readings.");
    }
}



void setup() {

    Serial.begin(115200); // Initializing serial port
    //-------1) WIFI CONNECTION-------

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");

  if (!client.connect(host, port)) {
    Serial.println("Connection to server failed");
  } else {
    Serial.println("Connected to server");
  }



  //-------2) LIDAR SETUP-------
  if (!Wire.begin(17,16))
  Serial.println("Echec de l'initialisation du LIDAR");

  

  //-------3) RADIO SETUP-------
  if (!driver.init())
  Serial.println("Echec de l'initialisation de Radiohead");
  
  //-------4) CALIBRATION LIDAR-------
  calibrateLIDAR();
  delay(4000);
  Serial.println("System ready. Waiting for cars...");
}

void loop() {
    // Definition buffer pour stocker les donnees RADIO 
    uint8_t buf[RH_ASK_MAX_MESSAGE_LEN];
    uint8_t buflen = sizeof(buf);

    // FONCTION LIDAR
  Wire.beginTransmission(SLAVE_ADDRESS);  // The I2C data transmission starts
  Wire.write(buf1,5);                       // send instructions
  Wire.endTransmission();                 // The I2C data transfer is complete
  Wire.requestFrom(SLAVE_ADDRESS, DATA_LENGTH); // Request data from an I2C device
  uint8_t data[DATA_LENGTH] = {0}; 
  uint16_t distance = 0; // Data variable
  int checksum = 0;
  int index = 0; 
  while (Wire.available() > 0 && index < DATA_LENGTH) {
    data[index++] = Wire.read(); // Read data into an array
  }
  if (index == DATA_LENGTH) {
    distance = data[2] + data[3] * 256; //  DistanceValue
      Serial.print("Distance: ");
      Serial.print(distance);
      Serial.print(" cm");
    
  } 



  // TEST DE LA DISTANCE ET AFFICHAGE ID VOITURE SI DETECTE
  if (distance < DETECTION_THRESHOLD) {
        if (driver.recv(buf, &buflen)){
            if (client.connected()) {
                Serial.print("Message recu: ");
                String message = "";
                for (int i = 0; i < buflen; i++)
                {
                Serial.write(buf[i]);
                message += String((char)buf[i]);
                }
                Serial.println("");
                

                String data = "{\"Distance\": " + String(distance) + ", \"Voiture\": \"" + message + "\"}";
                client.println(data);
                Serial.println("Data sent: " + data);
            
                
                // Attendre une réponse de la Raspberry Pi
                if (client.available()) {
                    String response = client.readStringUntil('\n');
                    Serial.println("Response from server: " + response);
                } else {
                    Serial.println("No response from server");
                }
            
                } else {
                Serial.println("Disconnected from server");
                }
            }   
        }
    delay(1000); // Send data every seconds
    }