// WIFI
#include <WiFi.h>
#include <FS.h>

const char* ssid = "iPhone Gevorg";
const char* password = "Artur2002";
const char* host = "172.20.10.2"; // Replace with your Raspberry Pi's IP address
const uint16_t port = 4000;

WiFiClient client;

// DEFINE LIDAR
#define SLAVE_ADDRESS 0x10 // Adresse I2C du périphérique secondaire
#define COMMAND 0x00 // Commande
#define DATA_LENGTH 9 // Longueur des données

// RADIO
#include <Wire.h>
#include <RH_ASK.h>
#include <SPI.h> 
RH_ASK driver(2000, 4, 5, 0);


unsigned char buf1[] = {0x5A, 0x05, 0x00, 0x01, 0x60};

// Paramètres de détection
const int DETECTION_THRESHOLD = 500;      // Seuil de détection de voiture (cm)
const int RESET_DISTANCE = 500;            // Seuil d'absence de voiture (cm)
const unsigned long RF_OPEN_WINDOW = 300;  // Temps de réception RF après détection (ms)
const int Capteur = 1; // Pour dire que c'est le capteur du tronçon 1



// États de détection
enum LIDARState { NO_CAR, CAR_PRESENT };
LIDARState currentState = NO_CAR;

unsigned long lastEventTime = 0;
unsigned int baselineDistance = 0;
int carCount = 0;

// Stockage des IDs détectés
char lastDetectedID[10] = "";



void setup() {
    Serial.begin(115200);

    // 1) CONNEXION WIFI
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.println("Connecting to WiFi...");
    }
  
    Serial.println("Connected to WiFi");
  
    if (!client.connect(host, port)) {
      Serial.println("Connection to server failed");
    } else {
      Serial.println("Connected to server");
    }

    // 2) CONNEXION LIDAR
    Wire.begin(17, 16); // Initialisation de la bibliothèque Wire

    // 3) RADIO
    if (!driver.init()) {
        Serial.println("RF init failed.");
    } else {
        Serial.println("RF module initialized successfully.");
    }

    Serial.println("System ready. Waiting for cars...");
}

void loop() {
    detectCar();
}



void detectCar() {
    Wire.beginTransmission(SLAVE_ADDRESS); // Début de la transmission I2C
    Wire.write(buf1, 5);                   // Envoi des instructions
    Wire.endTransmission();                // Fin de la transmission I2C
    Wire.requestFrom(SLAVE_ADDRESS, DATA_LENGTH); // Demande de données à un périphérique I2C

    uint8_t data[DATA_LENGTH] = {0};
    uint16_t distance = 0, strength = 0; // Variables de données
    int index = 0;

    while (Wire.available() > 0 && index < DATA_LENGTH) {
        data[index++] = Wire.read(); // Lecture des données dans un tableau
    }

    if (index == DATA_LENGTH) {
        distance = data[2] + data[3] * 256; // Valeur de la distance
        strength = data[4] + data[5] * 256; // Intensité du signal
        Serial.print("LIDAR reading: ");
        Serial.print(distance);
        Serial.println(" cm");

        unsigned long now = millis();

        if (distance > RESET_DISTANCE) {
            if (currentState != NO_CAR) {
                currentState = NO_CAR;
                Serial.println("No car detected. Resetting state.");
            }
        } else if (distance < DETECTION_THRESHOLD && currentState == NO_CAR) {
            currentState = CAR_PRESENT;
            baselineDistance = distance;
            lastEventTime = now;
            carCount++;
            Serial.print("Car detected (#");
            Serial.print(carCount);
            Serial.print(") Distance: ");
            Serial.print(distance);
            Serial.print(" cm at ");
            Serial.print(now);
            Serial.println(" ms");

            delay(50);  // Pause courte pour stabiliser la réception RF

            // POUR RECEVOIR LES ID RF DES VOITURES
            uint8_t buf[RH_ASK_MAX_MESSAGE_LEN];
            uint8_t buflen = sizeof(buf);
        
            if (driver.recv(buf, &buflen)) {
                buf[buflen] = '\0'; // S'assurer que c'est une chaîne bien formée
                Serial.print("RF ID received: ");
                Serial.println((char*)buf);
        
                // Vérifier si c'est un nouvel ID
                if (strcmp((char*)buf, lastDetectedID) != 0) {
                    strcpy(lastDetectedID, (char*)buf);
                    Serial.println("New car detected!");
                }
            } else {
                Serial.println("No ID received.");
            }
        }
    }
    if (client.connected()) {
        String data = "{\"distance\": distance, \"Car\": buf}";
        "{\"ID voiture\": \"" + String((char*)buf) + "\", \"Time\": " + String(lastEventTime) + ", \"Capteur\": " + String(Capteur) + "}";
        client.println(data);
        Serial.println("Data sent: " + data);

        
        // Attendre une réponse de la Raspberry Pi
        if (client.available()) {
        String response = client.readStringUntil('\n');
        Serial.println("Response from server: " + response);
        } else {
        Serial.println("No response from server");
        }

    } else {
        
        Serial.println("Disconnected from server");
    }

    delay(1000); // Send data every seconds
}